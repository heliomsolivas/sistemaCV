package hotel.controller;

import generic.annotation.LogonRequired;
import generic.annotation.PerfilRequired;
import generic.component.Erro;
import generic.component.UserSession;
import hotel.bean.Acomodacao;
import hotel.bean.Hotel;
import hotel.bean.Status;
import hotel.bean.TipoAcomodacao;
import hotel.dao.DaoAcomodacao;
import hotel.dao.DaoHotel;
import hotel.dao.DaoStatus;
import hotel.dao.DaoTipoAcomodacao;

import java.io.IOException;

import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.core.Localization;
import clientes.dao.DaoHospedeHospedagem;

@LogonRequired @PerfilRequired
@Resource
@Path("hotel/")
public class HotelController {
	
	private final DaoHotel daoHotel;
	private final DaoAcomodacao daoAcomodacao;
	private final DaoStatus daoStatus;
	private final DaoTipoAcomodacao daoTipoAcomodacao;
	private final DaoHospedeHospedagem daoHospedeHospedagem;
	private final Erro erro;
	private final Localization localization;
	private final Result result;
	private final UserSession userSession;

	public HotelController(DaoHotel daoHotel, DaoAcomodacao daoAcomodacao, DaoStatus daoStatus, DaoTipoAcomodacao daoTipoAcomodacao, 
			DaoHospedeHospedagem daoHospedeHospedagem, Erro erro, Localization localization, Result result, UserSession userSession) {
		this.daoHotel = daoHotel;
		this.daoAcomodacao = daoAcomodacao;
		this.daoTipoAcomodacao = daoTipoAcomodacao;
		this.daoHospedeHospedagem = daoHospedeHospedagem;
		this.daoStatus = daoStatus;
		this.erro = erro;
		this.localization = localization;
		this.result = result;
		this.userSession = userSession;
	}	

	@Path("cadastrarHotel")
	public void formHotel() {
	}
	
	@Path("consultarHotel")
	public void consultarHotel() {
		result.include("hotel", daoHotel.busca());
	}
	
	@Path("exibirInfoAcomodacao/{id}")
	public void exibirInfoAcomodacao (Long id) {
		result.include("acomodacao", daoAcomodacao.buscar(id));
		result.include("hospedeHospedagem", daoHospedeHospedagem.buscaHospedagemAcomodacao(id));
	}
	
	@Path("cadastrarAcomodacao")
	public void formAcomodacao() {
		result.include("hotel", daoHotel.busca());
		result.include("tipoAcomodacaoList", daoTipoAcomodacao.listarTudo("nome", "ASC"));
	}
	
	@Path("consultarAcomodacao/{id}")
	public void consultarAcomodacao(Long id) {
		result.include("acomodacao", daoAcomodacao.buscar(id));
		result.include("tipoAcomodacaoList", daoTipoAcomodacao.listarTudo("nome", "ASC"));
		result.include("statusList", daoStatus.listarTudo());
	}
	
	@Path("listarAcomodacoes")
	public void listarAcomodacoes() {
		result.include("acomodacaoList", daoAcomodacao.listarTudo("id", "ASC"));
	}
	
	@Post("gravar")
	public void gravar(Hotel hotel) {
		try {			
			daoHotel.adicionar(hotel);			
			result.include("mensagem", "usuario.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "usuario.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("alterarHotel")
	public void alterarHotel (Hotel hotel){
		try {
			Hotel hotel2 = daoHotel.buscar(hotel.getId());
			
			hotel2.setBairro(hotel.getBairro());
			hotel2.setCep(hotel.getCep());
			hotel2.setCidade(hotel.getCidade());
			hotel2.setCnpj(hotel.getCnpj());
			hotel2.setComplemento(hotel.getComplemento());
			hotel2.setEmail(hotel.getEmail());
			hotel2.setEndereco(hotel.getEmail());
			hotel2.setLogo(hotel.getLogo());
			hotel2.setNome(hotel.getNome());
			hotel2.setPadraoCheckIn(hotel.getPadraoCheckIn());
			hotel2.setPadraoCheckOut(hotel.getPadraoCheckOut());
			hotel2.setPadraoCheckOutEstendido(hotel.getPadraoCheckOutEstendido());
			hotel2.setPermiteMeiaDiariaCheckOutEstendido(hotel.getPermiteMeiaDiariaCheckOutEstendido());
			hotel2.setSite(hotel.getSite());
			hotel2.setTelefone(hotel.getTelefone());
			hotel2.setUf(hotel.getUf());
			
			daoHotel.atualizar(hotel2);
			result.include("mensagem", "hotel.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "hotel.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("gravarAcomodacao")
	public void gravarAcomodacao(Acomodacao acomodacao) {
		try {
			String observacoes = acomodacao.getObservacoes();
			observacoes = observacoes.replaceAll("\\<.*?\\>", "");
			observacoes = observacoes.replaceAll("\n", "<br/>");
			
			acomodacao.setObservacoes(observacoes);			
			acomodacao.setStatus(daoStatus.buscar(1L));
			
			daoAcomodacao.adicionar(acomodacao);			
			result.include("mensagem", "acomodacao.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "acomodacao.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("alterarAcomodacao")
	public void alterarAcomodacao(Acomodacao acomodacao) {
		try {
			String observacoes = acomodacao.getObservacoes();
			observacoes = observacoes.replaceAll("\\<.*?\\>", "");
			observacoes = observacoes.replaceAll("\n", "<br/>");
			
			Acomodacao acomodacao2 = daoAcomodacao.buscar(acomodacao.getId());
			TipoAcomodacao tipoAcomodacao = daoTipoAcomodacao.buscar(acomodacao.getTipo().getId());
			Status status = daoStatus.buscar(acomodacao.getStatus().getId());
			
			acomodacao2.setArCondicionado(acomodacao.getArCondicionado());
			acomodacao2.setCamaBox(acomodacao.getCamaBox());
			acomodacao2.setCofre(acomodacao.getCofre());
			acomodacao2.setDvd(acomodacao.getDvd());
			acomodacao2.setFogao(acomodacao.getFogao());
			acomodacao2.setFrigobar(acomodacao.getFrigobar());
			acomodacao2.setMaximoHospedes(acomodacao.getMaximoHospedes());
			acomodacao2.setMicroondas(acomodacao.getMicroondas());
			acomodacao2.setNome(acomodacao.getNome());
			acomodacao2.setNumero(acomodacao.getNumero());
			acomodacao2.setStatus(status);
			acomodacao2.setNumeroCamas(acomodacao.getNumeroCamas());
			acomodacao2.setObservacoes(observacoes);
			acomodacao2.setSecadorCabelo(acomodacao.getSecadorCabelo());
			acomodacao2.setTipo(tipoAcomodacao);
			acomodacao2.setTvLCD(acomodacao.getTvLCD());
			acomodacao2.setTvTubo(acomodacao.getTvTubo());
			acomodacao2.setUtensiliosCozinha(acomodacao.getUtensiliosCozinha());
			acomodacao2.setValorDiaria(acomodacao.getValorDiaria());
			acomodacao2.setVentilador(acomodacao.getVentilador());
			
			daoAcomodacao.atualizar(acomodacao2);
			result.include("mensagem", "acomodacao.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "acomodacao.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("removerAcomodacao/{id}")
	public void removerAcomodacao (Long id) {
		try {
			Acomodacao acomodacao = daoAcomodacao.buscar(id);
			
			daoAcomodacao.remover(acomodacao);
		} catch (Exception e) {
			result.include("mensagem", "usuario.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("atualizaDadosAcomodacao/{id}")
	public void atualizaDadosAcomodacao(Long id) throws IOException{
	/*	Acomodacao acomodacao = daoAcomodacao.buscar(id);
		PrintWriter out = response.getWriter();

		if (acomodacao != null)
			out.print(acomodacao.getNumero() + "],[" + acomodacao.getMaximoHospedes()); */
	}
}