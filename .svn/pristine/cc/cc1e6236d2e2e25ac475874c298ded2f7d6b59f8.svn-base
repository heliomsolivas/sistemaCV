package estoque.controller;

import estoque.bean.Fabricante;
import estoque.bean.Fornecedor;
import estoque.bean.Produto;
import estoque.dao.DaoFabricante;
import estoque.dao.DaoFornecedor;
import estoque.dao.DaoProduto;
import generic.annotation.LogonRequired;
import generic.annotation.PerfilRequired;
import generic.component.Erro;
import hotel.dao.DaoHotel;
import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.view.Results;

@LogonRequired @PerfilRequired
@Resource
@Path("estoque/")
public class EstoqueController {
	
	private final DaoFabricante daoFabricante;
	private final DaoFornecedor daoFornecedor;
	private final DaoHotel daoHotel;
	private final DaoProduto daoProduto;
	private final Erro erro;
	private final Result result;
	
	public EstoqueController(DaoFabricante daoFabricante, DaoFornecedor daoFornecedor, DaoHotel daoHotel, DaoProduto daoProduto, Erro erro, Result result) {
		this.daoFabricante = daoFabricante;
		this.daoFornecedor = daoFornecedor;
		this.daoHotel = daoHotel;
		this.daoProduto = daoProduto;
		this.erro = erro;
		this.result = result;
	}
	
	@Path("fabricante/cadastrar")
	public void formFabricante() {
	}
	
	@Path("fornecedor/cadastrar")
	public void formFornecedor() {
	}
	
	@Path("produto/cadastrar")
	public void formProduto() {		
		result.include("fabricanteList", daoFabricante.listarTudo("id", "ASC"));
	}
	
	@Path("fabricante/consultar/{id}")
	public void consultarFabricante(Long id) {
		result.include("fabricante", daoFabricante.buscar(id));
	}
	
	@Path("fornecedor/consultar/{id}")
	public void consultarFornecedor(Long id) {
		result.include("fornecedor", daoFornecedor.buscar(id));
	}
	
	@Path("produto/consultar/{id}")
	public void consultarProduto(Long id) {
		result.include("produto", daoProduto.buscar(id));
		result.include("fabricanteList", daoFabricante.listarTudo("id", "ASC"));
	}
	
	@Path("fabricante/lista")
	public void listaFabricante() {
	}
	
	@Path("fornecedor/lista")
	public void listaFornecedor() {
	}
	
	@Path("produto/lista")
	public void listaProduto() {
	}	
	
	@Post("fabricante/pesquisar")
	public void divListaFabricante(Long codigo, String nomeFabricante) {
		if (codigo != null)
			result.include("fabricanteList", daoFabricante.pesquisarFabricante(codigo, null));
		else if (nomeFabricante != null)
			result.include("fabricanteList", daoFabricante.pesquisarFabricante(null, nomeFabricante));
		else
			result.include("fabricanteList", daoFabricante.listarTudo("id", "ASC"));
	}
	
	@Post("fornecedor/pesquisar")
	public void divListaFornecedor(Long codigo, String nomeFornecedor) {
		if (codigo != null)
			result.include("fornecedorList", daoFornecedor.pesquisarFornecedor(codigo, null));
		else if (nomeFornecedor != null)
			result.include("fornecedorList", daoFornecedor.pesquisarFornecedor(null, nomeFornecedor));
		else
			result.include("fornecedorList", daoFornecedor.listarTudo("id", "ASC"));
	}
	
	@Post("produto/pesquisar")
	public void divListaProduto(Long codigo, String nomeProduto) {
		if (codigo != null)
			result.include("produtoList", daoProduto.pesquisarProduto(codigo, null));
		else if (nomeProduto != null)
			result.include("produtoList", daoProduto.pesquisarProduto(null, nomeProduto));
		else
			result.include("produtoList", daoProduto.listarTudo("id", "ASC"));
	}
	
	@Post("fabricante/gravar")
	public void gravar(Fabricante fabricante) {
		try {			
			daoFabricante.atualizar(fabricante);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("fornecedor/gravar")
	public void gravar(Fornecedor fornecedor) {
		try {
			if(fornecedor.getId() == null)
				fornecedor.setHotel(daoHotel.busca());
			
			daoFornecedor.atualizar(fornecedor);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("produto/gravar")
	public void gravar(Produto produto) {
		try {			
			if (produto.getQuantidade() >= 1)
				produto.setAtivo(true);
			else
				produto.setAtivo(false);
			
			daoProduto.atualizar(produto);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("fabricante/remover/{id}")
	public void remover(Fabricante fabricante, Long id) {
		try {
			fabricante = daoFabricante.buscar(id);
			
			daoFabricante.remover(fabricante);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("fornecedor/remover/{id}")
	public void remover(Fornecedor fornecedor, Long id) {
		try {
			fornecedor = daoFornecedor.buscar(id);
			
			daoFornecedor.remover(fornecedor);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("produto/remover/{id}")
	public void remover(Produto produto, Long id) {
		try {
			produto = daoProduto.buscar(id);
			
			daoProduto.remover(produto);
		} catch (Exception e) {
			result.include("mensagem", "estoque.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Get("produto/atualizaDados/{id}")
	public void atualizaDados(Produto produto, Long id) {
		produto = daoProduto.buscar(id);
		result.use(Results.http()).body(produto.getCategoria() + "],[" + produto.getValorUnitarioString() + "],[" + produto.getValorUnitario());
	}
}
