package clientes.controller;

import generic.annotation.LogonRequired;
import generic.annotation.PerfilRequired;
import generic.component.Erro;
import hotel.bean.Acomodacao;
import hotel.bean.Status;
import hotel.dao.DaoAcomodacao;
import hotel.dao.DaoHotel;
import hotel.dao.DaoStatus;

import java.util.ArrayList;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;

import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.view.Results;
import clientes.bean.Hospedagem;
import clientes.bean.Hospede;
import clientes.bean.HospedeHospedagem;
import clientes.dao.DaoHospedagem;
import clientes.dao.DaoHospede;
import clientes.dao.DaoHospedeHospedagem;

@LogonRequired @PerfilRequired
@Resource
@Path("clientes/")
public class ClientesController {
	
	private final DaoHotel daoHotel;
	private final DaoHospede daoHospede;
	private final DaoHospedeHospedagem daoHospedeHospedagem;
	private final DaoStatus daoStatus;
	private final DaoHospedagem daoHospedagem;
	private final DaoAcomodacao daoAcomodacao;
	private final Erro erro;
	private final Result result;
	
	
	public ClientesController(DaoHotel daoHotel, DaoHospede daoHospede, DaoHospedeHospedagem daoHospedeHospedagem, 
			DaoStatus daoStatus, DaoHospedagem daoHospedagem,DaoAcomodacao daoAcomodacao, Erro erro, Result result) {
			this.daoHotel = daoHotel;
			this.daoHospede = daoHospede;
			this.daoHospedeHospedagem = daoHospedeHospedagem;
			this.daoStatus = daoStatus;
			this.daoHospedagem = daoHospedagem;
			this.daoAcomodacao = daoAcomodacao;
			this.erro = erro;
			this.result = result;
		}
	
	@Path("cadastrarHospede")
	public void formHospede() {
	}
	
	@Path("listarHospedes")
	public void listarHospedes() {
		result.include("hospedeList", daoHospede.listarTudo("id", "ASC"));
	}
	
	@Path("consultarHospede/{id}")
	public void consultarHospede(Long id) {
		result.include("hospede", daoHospede.buscar(id));
	}
	
	@Path("cadastrarHospedagem")
	public void formHospedagem() {
		result.include("acomodacaoList", daoAcomodacao.listarAtivos());
		result.include("hotel", daoHotel.busca());
		result.include("hospedeList", daoHospede.listarTudo("id", "ASC"));
	}
	
	@Path("formCheckIn/{id}")
	public void formCheckIn (Long id) {
		result.include("acomodacao", daoAcomodacao.buscar(id));
		result.include("hotel", daoHotel.busca());
		result.include("hospedeList", daoHospede.listarTudo("id", "ASC"));
	}
	
	@Path("listarHospedeHospedagem")
	public void listarHospedeHospedagem() {
		result.include("hospedeHospedagemList", daoHospedeHospedagem.listarTudo("id", "ASC"));
	}
	
	@Path("consultarHospedeHospedagem/{id}")
	public void consultarHospedeHospedagem(Long id) {
		result.include("hospedeHospedagem", daoHospedeHospedagem.buscar(id));
		result.include("acomodacaoList", daoAcomodacao.listarAtivos());
	}
	
	@Post("gravar")
	public void gravar(Hospede hospede) {
		try {
			String observacoes = hospede.getObservacoes();
			observacoes = observacoes.replaceAll("\\<.*?\\>", "");
			observacoes = observacoes.replaceAll("\n", "<br/>");
			
			hospede.setHotel(daoHotel.busca());
			hospede.setDataCadastro(new GregorianCalendar(TimeZone.getTimeZone("GMT-3"), new Locale("pt", "BR")));
			hospede.setObservacoes(observacoes);
			
			daoHospede.adicionar(hospede);
			result.include("mensagem", "clientes.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("alterarHospede")
	public void alterarHospede(Hospede hospede) {
		try {
			String observacoes = hospede.getObservacoes();
			observacoes = observacoes.replaceAll("\\<.*?\\>", "");
			observacoes = observacoes.replaceAll("\n", "<br/>");
			
			Hospede hospede2 = daoHospede.buscar(hospede.getId());
			
			hospede2.setBairro(hospede.getBairro());
			hospede2.setCep(hospede.getCep());
			hospede2.setCidade(hospede.getCidade());
			hospede2.setComplemento(hospede.getComplemento());
			hospede2.setCor(hospede.getCor());
			hospede2.setCpf(hospede.getCpf());
			hospede2.setDataNascimento(hospede.getDataNascimento());
			hospede2.setEmail(hospede.getEmail());
			hospede2.setEndereco(hospede.getEndereco());
			hospede2.setEstado(hospede.getEstado());
			hospede2.setEstadoCivil(hospede.getEstadoCivil());
			hospede2.setFoto(hospede.getFoto());
			hospede2.setMeioTransporte(hospede.getMeioTransporte());
			hospede2.setMotivoViagem(hospede.getMotivoViagem());
			hospede2.setNacionalidade(hospede.getNacionalidade());
			hospede2.setNaturalidade(hospede.getNaturalidade());
			hospede2.setNome(hospede.getNome());
			hospede2.setObservacoes(observacoes);
			hospede2.setProfissao(hospede.getProfissao());
			hospede2.setProximoDestino(hospede.getProximoDestino());
			hospede2.setRg(hospede.getRg());
			hospede2.setSexo(hospede.getSexo());
			hospede2.setSituacao(hospede.getSituacao());
			hospede2.setTelefoneCelular(hospede.getTelefoneCelular());
			hospede2.setTelefoneComercial(hospede.getTelefoneComercial());
			hospede2.setTelefoneResidencial(hospede.getTelefoneResidencial());
			hospede2.setUltimaProcedencia(hospede.getUltimaProcedencia());
			
			daoHospede.atualizar(hospede2);
			result.include("mensagem", "clientes.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("removerHospede/{id}")
	public void removerHospede (Long id) {
		try {
			Hospede hospede = daoHospede.buscar(id);
			
			daoHospede.remover(hospede);
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("pesquisar")
	public void pesquisar(Long idHospede, String nomeHospede, String cpfHospede) {
		try {
			Collection<Hospede> hospedeList = new ArrayList<Hospede>();
			hospedeList = daoHospede.pesquisar(idHospede, nomeHospede, cpfHospede);
			
			result.include("hospedeList", hospedeList);
		} catch (Exception e) {
			result.include("mensagem", "Erro ao fazer a Pesquisa");
			erro.imprimir(this.getClass().getName(), "pesquisar" ,e);
		}
		result.nothing();
	}
	
	@Post("gravarHospedagem")
	public void gravarHospedagem (Hospedagem hospedagem, Long idHospede, HospedeHospedagem hospedeHospedagem) {
		try {
			String observacao = hospedagem.getObservacao();
			observacao = observacao.replaceAll("\\<.*?\\>", "");
			observacao = observacao.replaceAll("\n", "<br/>");
			
			Hospede hospede = daoHospede.buscar(idHospede);
			Acomodacao acomodacao = daoAcomodacao.buscar(hospedagem.getAcomodacao().getId());
			
			acomodacao.setStatus(daoStatus.buscar(2L));
			hospedagem.setValorDiaria(acomodacao.getValorDiaria());
			hospedagem.setValorTotal(acomodacao.getValorDiaria());
			hospedagem.setValorTotalConsumo(00.0);
			hospedagem.setObservacao(observacao);
			
			daoHospedagem.adicionar(hospedagem);
			
			Hospedagem hospedagem2 = daoHospedagem.buscar(hospedagem.getId());
			
			hospedeHospedagem.setHospede(hospede);
			hospedeHospedagem.setHospedagem(hospedagem2);
			hospedeHospedagem.setAtivo(true);
			
			daoHospedeHospedagem.adicionar(hospedeHospedagem);
			result.include("mensagem", "clientes.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("alterarHospedagem")
	public void alterarHospedagem(HospedeHospedagem hospedeHospedagem) {
		try {
			Hospedagem hospedagem = daoHospedagem.buscar(hospedeHospedagem.getHospedagem().getId());
			HospedeHospedagem hospedeHospedagem2 = daoHospedeHospedagem.buscar(hospedeHospedagem.getId());
			Acomodacao acomodacao2 = daoAcomodacao.buscar(hospedagem.getAcomodacao().getId());
			Status status = daoStatus.buscar(1l);
			Status status2 = daoStatus.buscar(2l);
			Acomodacao acomodacao = daoAcomodacao.buscar(hospedeHospedagem.getHospedagem().getAcomodacao().getId());
			
			String observacao = hospedeHospedagem.getHospedagem().getObservacao();
			observacao = observacao.replaceAll("\\<.*?\\>", "");
			observacao = observacao.replaceAll("\n", "<br/>");
			
			acomodacao2.setStatus(status);
			hospedagem.setAcomodacao(acomodacao);
			hospedagem.setDataCheckIn(hospedeHospedagem.getHospedagem().getDataCheckIn());
			hospedagem.setDataCheckOut(hospedeHospedagem.getHospedagem().getDataCheckOut());
			hospedagem.setCheckOutEstendidoGratuito(hospedeHospedagem.getHospedagem().getCheckOutEstendidoGratuito());
			hospedagem.setValorTotal(hospedeHospedagem.getHospedagem().getValorTotal());
			hospedagem.setValorTotalConsumo(hospedeHospedagem.getHospedagem().getValorTotalConsumo());
			hospedagem.setObservacao(observacao);
			acomodacao.setStatus(status2);
			
			daoHospedagem.atualizar(hospedagem);
			
			hospedeHospedagem2.setHospedagem(hospedagem);
			hospedeHospedagem2.setAtivo(hospedeHospedagem.getAtivo());
			
			daoHospedeHospedagem.atualizar(hospedeHospedagem2);
			result.include("mensagem", "clientes.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("removerHospedeHospedagem/{id}")
	public void removerHospedeHospedagem (Long id) {
		try {			
			HospedeHospedagem hospedeHospedagem = daoHospedeHospedagem.buscar(id);
			Hospedagem hospedagem = daoHospedagem.buscar(hospedeHospedagem.getHospedagem().getId());
			
			daoHospedeHospedagem.remover(hospedeHospedagem);
			daoHospedagem.remover(hospedagem);
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Post("checkOut")
	public void checkOut (Long idAcomodacao, Long idHospedeHospedagem) {
		try {
			Acomodacao acomodacao = daoAcomodacao.buscar(idAcomodacao);
			HospedeHospedagem hospedeHospedagem = daoHospedeHospedagem.buscar(idHospedeHospedagem);
			Hospedagem hospedagem = daoHospedagem.buscar(hospedeHospedagem.getHospedagem().getId());
			Status status = daoStatus.buscar(1l);
			
			acomodacao.setStatus(status);
			hospedagem.setDataCheckOut(new GregorianCalendar(TimeZone.getTimeZone("GMT-3"), new Locale("pt", "BR")));
			hospedeHospedagem.setAtivo(false);
			
			daoAcomodacao.atualizar(acomodacao);
			daoHospedeHospedagem.atualizar(hospedeHospedagem);
			result.include("mensagem", "clientes.gravar.sucesso");
		} catch (Exception e) {
			result.include("mensagem", "clientes.gravar.erro");
			erro.imprimir(this.getClass().getName(), "gravar" ,e);
		}
		result.nothing();
	}
	
	@Get("atualizaDadosHospede/{id}")
	public void atualizaDadosAcomodacao(Long id) {
		Hospede hospede = daoHospede.buscar(id);
		result.use(Results.http()).body(hospede.getCodigo() + "],[" + hospede.getNome() + "],[" + hospede.getDataNascimento().getTime() + "],[" + hospede.getCpf());
	}
}