/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2014-06-18 18:55:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.reserva;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class teste_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html lang=\"pt-br\">\r\n");
      out.write("\t<head>\t\t\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t$(document).ready(function () {\r\n");
      out.write("\t\t\t\t$(\"#scheduler\").kendoScheduler({\r\n");
      out.write("\t\t\t        height: 460,\r\n");
      out.write("\t\t\t        views: [\r\n");
      out.write("\t\t\t            { type: \"day\", selected: true },\r\n");
      out.write("\t\t\t            \"week\",\r\n");
      out.write("\t\t\t            \"month\",\r\n");
      out.write("\t\t\t            \"agenda\"\r\n");
      out.write("\t\t\t        ],\r\n");
      out.write("\t\t\t        timezone: \"Etc/UTC\",\r\n");
      out.write("\t\t\t        dataSource: {\r\n");
      out.write("\t\t\t            batch: true,\r\n");
      out.write("\t\t\t            transport: {\r\n");
      out.write("\t\t\t                read: {\r\n");
      out.write("\t\t\t                    url: \"http://demos.kendoui.com/service/tasks\",\r\n");
      out.write("\t\t\t                    dataType: \"jsonp\"\r\n");
      out.write("\t\t\t                },\r\n");
      out.write("\t\t\t                update: {\r\n");
      out.write("\t\t\t                    url: \"http://demos.kendoui.com/service/tasks/update\",\r\n");
      out.write("\t\t\t                    dataType: \"jsonp\"\r\n");
      out.write("\t\t\t                },\r\n");
      out.write("\t\t\t                create: {\r\n");
      out.write("\t\t\t                    url: \"http://demos.kendoui.com/service/tasks/create\",\r\n");
      out.write("\t\t\t                    dataType: \"jsonp\"\r\n");
      out.write("\t\t\t                },\r\n");
      out.write("\t\t\t                destroy: {\r\n");
      out.write("\t\t\t                    url: \"http://demos.kendoui.com/service/tasks/destroy\",\r\n");
      out.write("\t\t\t                    dataType: \"jsonp\"\r\n");
      out.write("\t\t\t                },\r\n");
      out.write("\t\t\t                parameterMap: function(options, operation) {\r\n");
      out.write("\t\t\t                    if (operation !== \"read\" && options.models) {\r\n");
      out.write("\t\t\t                        return {models: kendo.stringify(options.models)};\r\n");
      out.write("\t\t\t                    }\r\n");
      out.write("\t\t\t                }\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            schema: {\r\n");
      out.write("\t\t\t                model: {\r\n");
      out.write("\t\t\t                    id: \"taskId\",\r\n");
      out.write("\t\t\t                    fields: {\r\n");
      out.write("\t\t\t                        taskId: { from: \"TaskID\", type: \"number\" },\r\n");
      out.write("\t\t\t                        title: { from: \"Title\", defaultValue: \"Nenhum Título\", validation: { required: true } },\r\n");
      out.write("\t\t\t                        start: { type: \"date\", from: \"Start\" },\r\n");
      out.write("\t\t\t                        end: { type: \"date\", from: \"End\" },\r\n");
      out.write("\t\t\t                        startTimezone: { from: \"StartTimezone\" },\r\n");
      out.write("\t\t\t                        endTimezone: { from: \"EndTimezone\" },\r\n");
      out.write("\t\t\t                        description: { from: \"Description\" },\r\n");
      out.write("\t\t\t                        recurrenceId: { from: \"RecurrenceID\" },\r\n");
      out.write("\t\t\t                        recurrenceRule: { from: \"RecurrenceRule\" },\r\n");
      out.write("\t\t\t                        recurrenceException: { from: \"RecurrenceException\" },\r\n");
      out.write("\t\t\t                        ownerId: { from: \"OwnerID\", defaultValue: 1 },\r\n");
      out.write("\t\t\t                        isAllDay: { type: \"boolean\", from: \"IsAllDay\" }\r\n");
      out.write("\t\t\t                    }\r\n");
      out.write("\t\t\t                }\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            filter: {\r\n");
      out.write("\t\t\t                logic: \"or\",\r\n");
      out.write("\t\t\t                filters: [\r\n");
      out.write("\t\t\t                    { field: \"ownerId\", operator: \"eq\", value: 1 },\r\n");
      out.write("\t\t\t                    { field: \"ownerId\", operator: \"eq\", value: 2 },\r\n");
      out.write("\t\t\t                    { field: \"ownerId\", operator: \"eq\", value: 3 }\r\n");
      out.write("\t\t\t                ]\r\n");
      out.write("\t\t\t            }\r\n");
      out.write("\t\t\t        },\r\n");
      out.write("\t\t\t        resources: [\r\n");
      out.write("\t\t\t            {\r\n");
      out.write("\t\t\t                field: \"ownerId\",\r\n");
      out.write("\t\t\t                title: \"Proprietário\",\r\n");
      out.write("\t\t\t                dataSource: [\r\n");
      out.write("\t\t\t                    { text: \"Alex\", value: 1, color: \"#f8a398\" },\r\n");
      out.write("\t\t\t                    { text: \"Bob\", value: 2, color: \"#51a0ed\" },\r\n");
      out.write("\t\t\t                    { text: \"Charlie\", value: 3, color: \"#56ca85\" }\r\n");
      out.write("\t\t\t                ]\r\n");
      out.write("\t\t\t            }\r\n");
      out.write("\t\t\t        ]\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    $(\"#people :checkbox\").change(function(e) {\r\n");
      out.write("\t\t\t        var checked = $.map($(\"#people :checked\"), function(checkbox) {\r\n");
      out.write("\t\t\t            return parseInt($(checkbox).val());\r\n");
      out.write("\t\t\t        });\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        var filter = {\r\n");
      out.write("\t\t\t            logic: \"or\",\r\n");
      out.write("\t\t\t            filters: $.map(checked, function(value) {\r\n");
      out.write("\t\t\t                return {\r\n");
      out.write("\t\t\t                    operator: \"eq\",\r\n");
      out.write("\t\t\t                    field: \"ownerId\",\r\n");
      out.write("\t\t\t                    value: value\r\n");
      out.write("\t\t\t                };\r\n");
      out.write("\t\t\t            })\r\n");
      out.write("\t\t\t        };\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t        var scheduler = $(\"#scheduler\").data(\"kendoScheduler\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t        scheduler.dataSource.filter(filter);\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t});\t\t\t\t\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t<style type=\"text/css\">\r\n");
      out.write("\t\t    .k-nav-current > .k-link span + span {\r\n");
      out.write("\t\t\t    display: inline-block;\r\n");
      out.write("\t\t\t    white-space: nowrap;\r\n");
      out.write("\t\t\t    text-overflow: ellipsis;\r\n");
      out.write("\t\t\t    overflow: hidden;\r\n");
      out.write("\t\t\t    vertical-align: top;\r\n");
      out.write("\t\t\t    margin-top: -10px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t#people {\r\n");
      out.write("\t\t\t    background: url('../imagens/imagemTeste.png') transparent no-repeat;\r\n");
      out.write("\t\t\t    height: 115px;\r\n");
      out.write("\t\t\t    position: relative;\r\n");
      out.write("\t\t\t    margin-left: 20px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t#alex {\r\n");
      out.write("\t\t\t    position: absolute;\r\n");
      out.write("\t\t\t    left: 404px;\r\n");
      out.write("\t\t\t    top: 81px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t#bob {\r\n");
      out.write("\t\t\t    position: absolute;\r\n");
      out.write("\t\t\t    left: 519px;\r\n");
      out.write("\t\t\t    top: 81px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t#charlie {\r\n");
      out.write("\t\t\t    position: absolute;\r\n");
      out.write("\t\t\t    left: 634px;\r\n");
      out.write("\t\t\t    top: 81px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</style>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body class=\"divConteudo\">\t\r\n");
      out.write("\t\t<div style=\"width: 795px;\">\r\n");
      out.write("\t\t\t<div id=\"example\" class=\"k-content\" style=\"margin-bottom: 0px; margin-top: 0px; border: 0px; background: none;\">\r\n");
      out.write("\t\t  \t\t<div id=\"people\" style=\"width: 750px;\">\r\n");
      out.write("\t\t\t        <input id=\"alex\" type=\"checkbox\" value=\"1\" checked>\r\n");
      out.write("\t\t\t        <input id=\"bob\" type=\"checkbox\" value=\"2\" checked >\r\n");
      out.write("\t\t\t        <input id=\"charlie\" type=\"checkbox\" value=\"3\" checked>\r\n");
      out.write("\t\t    \t</div>\r\n");
      out.write("\t\t\t    <div id=\"scheduler\" style=\"width: 750px; margin-left: 20px; margin-right: 20px;\"></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
