package generic.controller;

import generic.annotation.LogonRequired;
import generic.component.UserSession;
import hotel.bean.Acomodacao;
import hotel.bean.Status;
import hotel.dao.DaoAcomodacao;
import hotel.dao.DaoHotel;
import hotel.dao.DaoStatus;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;

import br.com.caelum.vraptor.Path;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.core.Localization;
import clientes.bean.Hospedagem;
import clientes.bean.HospedeHospedagem;
import clientes.dao.DaoHospedagem;
import clientes.dao.DaoHospedeHospedagem;

@LogonRequired
@Resource
public class SistemaController {

	private final Localization localization;
	private final Result result;
	private final UserSession userSession;
	private final DaoHotel daoHotel;
	private final DaoAcomodacao daoAcomodacao;
	private final DaoHospedagem daoHospedagem;
	private final DaoHospedeHospedagem daoHospedeHospedagem;
	private final DaoStatus daoStatus;

	public SistemaController(Localization localization, Result result, UserSession userSession, DaoHotel daoHotel, DaoAcomodacao daoAcomodacao,
			 DaoHospedagem daoHospedagem, DaoHospedeHospedagem daoHospedeHospedagem, DaoStatus daoStatus) {
		this.localization = localization;
		this.result = result;
		this.userSession = userSession;
		this.daoHotel = daoHotel;
		this.daoAcomodacao = daoAcomodacao;
		this.daoHospedagem = daoHospedagem;
		this.daoHospedeHospedagem = daoHospedeHospedagem;
		this.daoStatus = daoStatus;
	}
	
	@Path("sistema/")
	public void index() {
		Calendar dataAtual = new GregorianCalendar(TimeZone.getTimeZone("GMT-3"), new Locale("pt","BR"));
		try {
			DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.FULL, this.localization.getLocale());

			Integer hora = dataAtual.get(Calendar.HOUR_OF_DAY);
			String saudacao = (hora >= 0 && hora <= 12) ? "saudacao.manha" : (hora >= 12) && (hora < 18) ? "saudacao.tarde"	: (hora >= 18) && (hora < 24) ? "saudacao.noite" : "saudacao.manha";
			
			Collection<HospedeHospedagem> hospedeHospedagemList = new ArrayList<HospedeHospedagem>();
			hospedeHospedagemList = daoHospedeHospedagem.listarTudo("id", "ASC");
			
			for (HospedeHospedagem item : hospedeHospedagemList) {
				
				if (item.getAtivo() == true) {
					Hospedagem hospedagem = daoHospedagem.buscar(item.getHospedagem().getId());
					
					if (hospedagem.getDataCheckOut().getTime().before(dataAtual.getTime())) {
						HospedeHospedagem hospedeHospedagem = daoHospedeHospedagem.buscar(item.getId());
						Acomodacao acomodacao = daoAcomodacao.buscar(hospedeHospedagem.getHospedagem().getAcomodacao().getId());
						Status status = daoStatus.buscar(1L);
						
						acomodacao.setStatus(status);
						hospedeHospedagem.setAtivo(false);
						
						daoAcomodacao.atualizar(acomodacao);
						daoHospedeHospedagem.atualizar(hospedeHospedagem);
					}
				}
			}
			
			result.include("acomodacaoList", daoAcomodacao.listarTudo("id", "ASC"));
			result.include("hotel", daoHotel.busca());
			result.include("data", this.localization.getMessage("data", dateFormat.format(dataAtual.getTime())));
			result.include("saudacao", this.localization.getMessage(saudacao, this.userSession.getUsuario().getNome()));
		} catch (Exception e) {
			result.include("mensagem", "logon.sessao.expirada");
			result.redirectTo(SistemaController.class).acessoRestrito();
		}
	}

	@Path("sistema/acessoRestrito")
	public void acessoRestrito() {
	}

	@Path("sistema/aplicativos")
	public void aplicativos() {
	}

	@Path("sistema/teste")
	public void formularioTeste() {
	}

}